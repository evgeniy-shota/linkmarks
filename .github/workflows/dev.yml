name: Check, test and deploy
on: push
jobs:
  test:
    runs-on: ubuntu-22.04
    services:
          postgres:
            image: postgres:17
            ports:
              - 5432:5432
            env:
              POSTGRES_DB: homestead
              POSTGRES_USER: homestead
              POSTGRES_PASSWORD: secret
    steps:
      - name: Install packages
        run: |
          sudo apt-get update -y

      - name: Get repository code
        uses: actions/checkout@v4.2.2

      - name: Setup php
        uses: shivammathur/setup-php@2.34.1
        with:
          php-version: '8.4'
          extensions: imagick, gd, pdo, pdo_pgsql     
          
      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'

      - name: Install nodejs dependencies
        run: |
          npm install
          npm run build
        working-directory: ./src
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        working-directory: ./src

      #setup Laravel
      - name: Setup laravel
        env:
          DB_HOST: localhost
          DB_PORT: ${{secrets.DB_PORT}}
        run: |
          cp .env.example .env
          php artisan migrate
          php artisan app:init-default-thumbnail
          php artisan config:clear
        working-directory: ./src

      - name: Set permissions
        run: chmod -R 777 storage bootstrap/cache
        working-directory: ./src 

      - name: List phpunit settings
        run: cat phpunit.xml
        working-directory: ./src
  
      - name: Composer audit
        run: composer audit
        working-directory: ./src

      - name: Composer validate
        run: composer validate --no-check-all --strict
        working-directory: ./src

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: ${{secrets.DB_PORT}}
        run: php artisan test
        working-directory: ./src

      - name: PHPStan
        run: ./vendor/bin/phpstan analyse
        working-directory: ./src

      - name: List Laravel log
        if: always()
        run: |
          ls storage/logs/
          if [ -f storage/logs/laravel.log ]; then
            tail -n 200 storage/logs/laravel.log
          else
            echo "No laravel log found"
          fi
        working-directory: ./src
  
  # DEPLOY
  deploy:
    needs: [test]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          sparse-checkout: |
            src
            dockerfiles/nginx

      - name: Change env file
        run: |
          mv .env.example .env
          sed -i -r 's/APP_ENV=[A-Za-z]+/APP_ENV=production/g' .env
          sed -i 's/APP_DEBUG=true/APP_DEBUG=false/g' .env
          sed -i -r 's/DB_HOST=[a-z0-9\.]+/DB_HOST=${{secrets.DB_HOST}}/g' .env
          sed -i -r 's/DB_PORT=[0-9]{2,4}:[0-9]{2,4}/DB_PORT=${{secrets.DB_PORT}}/g' .env
          sed -i -r 's/DB_DATABASE=[A-Za-z0-9_-]+/DB_DATABASE=${{secrets.DB_NAME}}/g' .env
          sed -i -r 's/DB_USERNAME=[A-Za-z0-9_-]+/DB_USERNAME=${{secrets.DB_USER}}/g' .env
          sed -i -r 's/DB_PASSWORD=[A-Za-z0-9_!\.,-]+/DB_PASSWORD=${{secrets.DB_PASSWORD}}/g' .env
        working-directory: ./src

      - name: Setup php
        uses: shivammathur/setup-php@2.34.1
        with:
          php-version: '8.4'
          extensions: imagick, gd, pdo, pdo_pgsql     
          
      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'

      - name: Install nodejs dependencies
        run: |
          npm install
          npm run build
        working-directory: ./src      

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        working-directory: ./src

      - name: Permisson setup
        run: |
          echo ${{secrets.SERVER_PASSWORD}} | sudo -S chmod -R 777 storage bootstrap/cache
        working-directory: ./src
        
      - name: Prepare Laravel
        run: |
          php artisan config:clear 
          #php artisan cache:clear
          php artisan key:generate
          php artisan storage:link
        working-directory: ./src

      - name: SCP Command to Transfer Files
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_DEPLOY }}          
          password: ${{ secrets.SERVER_PASSWORD }}      
          overwrite: true 
          source: "src,dockerfiles/nginx"
          target: "~"
      
      - name: SSH connect
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_IP }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_DEPLOY }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo ${{secrets.SERVER_PASSWORD}} | sudo -S mv -f ./dockerfiles/nginx/default.conf /etc/nginx
            echo ${{secrets.SERVER_PASSWORD}} | sudo -S rsync -r src/ /var/www/linkmarks/
            echo ${{secrets.SERVER_PASSWORD}} | sudo -S rm -rf src
            echo ${{secrets.SERVER_PASSWROD}} | sudo -S chown -R ${{secrets.SERVER_USERNAME}} /var/www/linkmarks
            cd /var/www/linkmarks
            php artisan migrate && php artisan optimize

            

